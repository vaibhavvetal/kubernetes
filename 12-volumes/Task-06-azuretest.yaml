apiVersion: v1
kind: Namespace
metadata:
   name: azurens
---
apiVersion: v1
kind: Secret
metadata:
  creationTimestamp: null
  name: azure-fileshare-secret
  namespace: azurens
data:
  azurestorageaccountkey: QTdaczU2MU5jSDNPL0h0UFYwRm1Bb2tpRVZ1S1pqcXRwbFlURm9aUGw1dTJTU0R1R0laTUE2S3BLaUJhRGIwOGkreUo0c21Fak81MTFlbE54OEhHTVE9PQ==
  azurestorageaccountname: a2Vzc3RvcmFnZWZvcnBvZA==

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: fileshare-pv
  namespace: azurens
  labels:
    usage: fileshare-pv
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  azureFile:
    secretName: azure-fileshare-secret
    shareName: kesshare
    readOnly: false

---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: fileshare-pvc
  namespace: azurens
  # Set this annotation to NOT let Kubernetes automatically create
  # a persistent volume for this volume claim.
  annotations:
    volume.beta.kubernetes.io/storage-class: ""
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Mi
  selector:
    # To make sure we match the claim with the exact volume, match the label
    matchLabels:
      usage: fileshare-pv

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fileshare-deployment
  namespace: azurens
  labels:
    app: fileshare-deployment
spec:
  replicas: 3
  selector:
    matchLabels:
      app: fileshare-deployment
  template:
    metadata:
      labels:
        app: fileshare-deployment
    spec:
      volumes:
      - name: azure
        persistentVolumeClaim:
          claimName: fileshare-pvc
      containers:
      - name: main
        image: nginx:alpine
        volumeMounts:
        - name: azure
          mountPath: "/azureshare"